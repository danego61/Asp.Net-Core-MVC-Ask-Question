// <auto-generated />
using System;
using AskQuestion.DataAccess.Concrete.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AskQuestion.DataAccess.Migrations
{
    [DbContext(typeof(AskQuestionContext))]
    [Migration("20211117194315_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AskQuestion.Entities.Concrete.AskedQuestion", b =>
                {
                    b.Property<int>("AskedQuestionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameSurname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NameSurname");

                    b.Property<string>("QuestionUrl")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nchar(6)")
                        .HasColumnName("QuestionUrl");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("AskedQuestionID")
                        .HasName("AskedQuestionID");

                    b.HasIndex("QuestionUrl")
                        .IsUnique();

                    b.HasIndex("UserID");

                    b.ToTable("AskedQuestions");
                });

            modelBuilder.Entity("AskQuestion.Entities.Concrete.Question", b =>
                {
                    b.Property<int>("QuestionPoolID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Option1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Option1");

                    b.Property<string>("Option2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Option2");

                    b.Property<string>("Option3")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Option3");

                    b.Property<string>("Option4")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Option4");

                    b.Property<string>("Option5")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Option5");

                    b.Property<int>("QuestionPoolStatus")
                        .HasColumnType("int")
                        .HasColumnName("QuestionPoolStatus");

                    b.Property<string>("QuestionTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("QuestionTitle");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("QuestionPoolID")
                        .HasName("QuestionPoolID");

                    b.HasIndex("UserID");

                    b.ToTable("QuestionPool");

                    b.HasData(
                        new
                        {
                            QuestionPoolID = 1,
                            Option1 = "Patates Kızartması",
                            Option2 = "Burger",
                            Option3 = "Döner",
                            Option4 = "Kuru Fasulye",
                            Option5 = "Makarna",
                            QuestionPoolStatus = 1,
                            QuestionTitle = "En sevdiğim yemek?",
                            UserID = 1
                        },
                        new
                        {
                            QuestionPoolID = 2,
                            Option1 = "Pop",
                            Option2 = "Rap",
                            Option3 = "Rock",
                            Option4 = "Türk Halk Müziği",
                            Option5 = "Arabesk",
                            QuestionPoolStatus = 1,
                            QuestionTitle = "En sevdiğim müzik türü?",
                            UserID = 1
                        },
                        new
                        {
                            QuestionPoolID = 3,
                            Option1 = "Uyuyarak",
                            Option2 = "Bilgisayar başında",
                            Option3 = "Yürüyüş yaparak",
                            Option4 = "Kitap okuyarak",
                            Option5 = "Arkadaşlarıyla buluşarak",
                            QuestionPoolStatus = 1,
                            QuestionTitle = "Zamanımı nasıl geçiririm?",
                            UserID = 1
                        },
                        new
                        {
                            QuestionPoolID = 4,
                            Option1 = "Kayıp parayı bulmak",
                            Option2 = "Tuttuğu takımın galibiyeti",
                            Option3 = "Süpriz hediye almak",
                            Option4 = "Alışveriş mağazasındaki indirimler",
                            Option5 = "Çekilişle telefon kazanmak",
                            QuestionPoolStatus = 1,
                            QuestionTitle = "Beni en çok ne sevindirir?",
                            UserID = 1
                        });
                });

            modelBuilder.Entity("AskQuestion.Entities.Concrete.QuestionAnswer", b =>
                {
                    b.Property<int>("QuestionAnswerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Answer")
                        .HasColumnType("int")
                        .HasColumnName("Answer");

                    b.Property<string>("NameSurname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NameSurname");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.HasKey("QuestionAnswerID")
                        .HasName("QuestionAnswerID");

                    b.HasIndex("QuestionID");

                    b.ToTable("QuestionAnswer");
                });

            modelBuilder.Entity("AskQuestion.Entities.Concrete.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Email");

                    b.Property<Guid?>("EmailVerifyToken")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EmailVerifyToken");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit")
                        .HasColumnName("Admin");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("bit")
                        .HasColumnName("EmailVerified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("Name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nchar(64)")
                        .HasColumnName("Password");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("Surname");

                    b.HasKey("UserID")
                        .HasName("UserID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            Email = "danego61@gmail.com",
                            IsAdmin = true,
                            IsEmailVerified = true,
                            Name = "Yusuf",
                            Password = "143ae4caf57afa86ce1d34adee6273f67963c59ddaebb05bb104778d483aca25",
                            Surname = "Akbaş"
                        });
                });

            modelBuilder.Entity("AskQuestion.Entities.Concrete.UserQuestion", b =>
                {
                    b.Property<int>("QuestionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AskedQuestionID")
                        .HasColumnType("int");

                    b.Property<int>("CorrectOption")
                        .HasColumnType("int")
                        .HasColumnName("CorrectOption");

                    b.Property<int>("QuestionPoolID")
                        .HasColumnType("int");

                    b.HasKey("QuestionID")
                        .HasName("QuestionID");

                    b.HasIndex("AskedQuestionID");

                    b.HasIndex("QuestionPoolID");

                    b.ToTable("UserQuestion");
                });

            modelBuilder.Entity("AskQuestion.Entities.Concrete.AskedQuestion", b =>
                {
                    b.HasOne("AskQuestion.Entities.Concrete.User", "User")
                        .WithMany("UserAskedQuestions")
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AskQuestion.Entities.Concrete.Question", b =>
                {
                    b.HasOne("AskQuestion.Entities.Concrete.User", "User")
                        .WithMany("UserQuestions")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AskQuestion.Entities.Concrete.QuestionAnswer", b =>
                {
                    b.HasOne("AskQuestion.Entities.Concrete.UserQuestion", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("AskQuestion.Entities.Concrete.UserQuestion", b =>
                {
                    b.HasOne("AskQuestion.Entities.Concrete.AskedQuestion", "AskedQuestion")
                        .WithMany("Questions")
                        .HasForeignKey("AskedQuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AskQuestion.Entities.Concrete.Question", "Question")
                        .WithMany("UserQuestions")
                        .HasForeignKey("QuestionPoolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AskedQuestion");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("AskQuestion.Entities.Concrete.AskedQuestion", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("AskQuestion.Entities.Concrete.Question", b =>
                {
                    b.Navigation("UserQuestions");
                });

            modelBuilder.Entity("AskQuestion.Entities.Concrete.User", b =>
                {
                    b.Navigation("UserAskedQuestions");

                    b.Navigation("UserQuestions");
                });

            modelBuilder.Entity("AskQuestion.Entities.Concrete.UserQuestion", b =>
                {
                    b.Navigation("Answers");
                });
#pragma warning restore 612, 618
        }
    }
}
